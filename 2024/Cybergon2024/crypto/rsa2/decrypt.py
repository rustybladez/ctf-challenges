from Crypto.Util.number import long_to_bytes, inverse, GCD

# Challenge parameters
n = 11222960521299588524750181772783274494136260187265706255449546453051590711140226315418489273605550786286866861213107560059068705390211163996521916889962843049465232723113513937161139708829580255839302498745553742822028219120815522776817194932205965607268871964492604160910360630823557368267758149998874303490258640254944041292488072709825912234589051956237101861393250166383288225471240410545441288641428317727282487089617398205216009066566291920484141970950043945692757053601681465771996222610983586467074641256505745938075296078516556647247578105282414665403694284697737212759109318373113013635864830591729084632299
e = 65537
enc = 4576734045815415117393714785631533893386989421975362873054714721973774635633807216351035380690773987036176885213178400507495200723424882273269742714702510936914814535126953769815835845599408528989444709086820755745243538401968889036685263510116853431754692979282106622905405182176002591188189168848540317758672663110614746587847277186013825393236023619071578716175239047234708469908780821882885343491830991331125549714754449771483301008011927254615527584621447108823713195265186077687379401023743186083665136488814637885852911584730913514513104311188825766310494436999295732392931981405989153709642320565431642748272

value2 = 2**1024
result1 = 66953810142124815039330074236499310261872548478302540667230702366186795585053774076152555207345970575178148375832595166215236604690676109828736048475386794816121161445406948904951500098521882759834245621717603117359421674234377857916939480197431736700748894114250914875188652571151182449577867725826435423376

# Brute force `p` from result1 (reverse Calculation function)
# Modulo with 2**1024 to isolate value1
p = result1 % value2

# Compute q
q = n // p
assert n == p * q, "Failed to recover p and q"

# Compute private key d
phi = (p - 1) * (q - 1)
d = inverse(e, phi)

# Decrypt the ciphertext
plaintext = pow(enc, d, n)
print("Flag:", long_to_bytes(plaintext))
